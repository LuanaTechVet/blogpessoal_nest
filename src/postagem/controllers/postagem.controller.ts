import {
  Body,
  Controller,
  Delete,
  Get,
  HttpCode,
  HttpStatus,
  Param,
  ParseIntPipe,
  Post,
  Put,
} from '@nestjs/common';
import { Postagem } from '../entities/postagem.entity';
import { PostagemService } from '../services/postagem.service';

@Controller('/postagens') //URL (Endpoint): Define o caminho da requisi√ß√£o,todas as requisi√ß√µes enviadas para o caminho /postagens ser√£o direcionadas para a classe controladora PostagemController
export class PostagemController {
  constructor(private readonly postagemService: PostagemService) {}

  @Get()
  @HttpCode(HttpStatus.OK) //c√≥digos de sucesso
  findAll(): Promise<Postagem[]> {
    return this.postagemService.findAll();
  }

  @Get('/:id') //mapea as requisi√ß√µes HTTP GET enviadas para o endpoint /postagens/:id. O :id no endpoint √© um par√¢metro de rota, que representa o identificador da postagem a ser recuperada.
  @HttpCode(HttpStatus.OK)
  findById(@Param('id', ParseIntPipe) id: number): Promise<Postagem> {
    //@Param('id') para capturar o valor do par√¢metro id enviado na URL da requisi√ß√£o e o insere como argumento no m√©todo findById()
    return this.postagemService.findById(id); //A Classe ParseIntPipe √© utilizada para garantir que o valor de id seja tratado como um n√∫mero inteiro
  }

  @Get('/titulo/:titulo')
  @HttpCode(HttpStatus.OK)
  findByAllTitulo(@Param('titulo') titulo: string): Promise<Postagem[]> {
    //novo m√©todo, findAllByTitulo foi criado na service
    //Por quest√µes de boas pr√°ticas e legibilidade do c√≥digo, a Vari√°vel de Caminho e o Par√¢metro do M√©todo devem possuir o mesmo nome
    return this.postagemService.findAllByTitulo(titulo);
  }

  @Post()
  @HttpCode(HttpStatus.CREATED) //qualquer requisi√ß√£o POST enviada para esse endere√ßo ser√° tratada pelo M√©todo create da classe controladora
  //o m√©todo √© utilizado para criar novos registros no banco de dados, recebendo os dados no corpo da requisi√ß√£o
  create(@Body() postagem: Postagem): Promise<Postagem> {
    //Este decorador(@Body) acessa o Objeto postagem enviado no corpo da Requisi√ß√£o e insere no Objeto postagem (par√¢metro) do M√©todo create(@Body() postagem: Postagem)
    return this.postagemService.create(postagem);
  }
  @Put()
  @HttpCode(HttpStatus.OK)
  update(@Body() postagem: Postagem): Promise<Postagem> {
    return this.postagemService.update(postagem);
  }

  @Delete('/:id')
  @HttpCode(HttpStatus.NO_CONTENT) //quando a Resposta da Requisi√ß√£o for positiva (o Objeto foi apagado no Banco de dados), ser√° retornado o HTTP Status NO_CONTENT ü°™ 204
  delete(@Param('id', ParseIntPipe) id: number) {
    //@Param('id'): Este decorator insere o valor enviado na vari√°vel de caminho id (:id), no par√¢metro do M√©todo delete(@Param('id', ParseIntPipe) id: number);
    return this.postagemService.delete(id);
  }
}
